xaringan::inf_mr()
xaringan::moon_reader()
xaringan::inf_mr()
xaringan::inf_mr
xaringan::inf_mr(swat-2022)
xaringan::inf_mr("swat-2022")
xaringan::inf_mr(xaringan::moon_reader)
xaringan::inf_mr(assets)
xaringan::inf_mr()
xaringan::inf_mr()
install.packages("xaringan")
install.packages("xaringan")
xaringan::inf_mr()
xaringan::infinite_moon_reader()
xaringan::moon_reader()
remotes::install_github('yihui/xaringan', upgrade = TRUE)
install_github('yihui/xaringan', upgrade = TRUE)
install_github
xaringan::inf_mr()
xaringan::inf_mr("swat-2021/index.rmd")
xaringan::inf_mr("swat-2022/index.rmd")
xaringan::inf_mr("swat-2022/index.rmd")
xaringan::inf_mr("swat-2022/index.rmd")
xaringan::inf_mr("swat-2022/index.rmd")
xaringan::inf_mr("swat-2022/index.rmd")
xaringan::inf_mr("swat-2022/index.rmd")
xaringan::inf_mr("swat-2022/index.rmd")
xaringan::inf_mr("swat-2022/index.rmd")
xaringan::inf_mr("swat-2022/index.rmd")
xaringan::inf_mr("swat-2022/index.rmd")
xaringan::inf_mr("swat-2022/index.rmd")
xaringan::inf_mr("swat-2022/index.rmd")
xaringan::inf_mr("swat-2022/index.rmd")
xaringan::inf_mr("swat-2022/index.rmd")
download.file("http://www.openintro.org/stat/data/ames.RData", destfile = "ames.RData")
load("ames.RData")
population <- ames$Gr.Liv.Area
samp <- sample(population, 60)
hist(samp)
mean(samp)
sample_mean <- mean(samp)
se <- sd(samp) / sqrt(60)
lower <- sample_mean - 1.96 * se
upper <- sample_mean + 1.96 * se
c(lower, upper)
mean(population)
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
for(i in 1:50){
samp <- sample(population, n) # obtain a sample of size n samp_mean[i] <- mean(samp) # save sample mean samp_sd[i] <- sd(samp) # save sample sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1],upper_vector[1])
for(i in 1:50){
samp <- sample(population, n) # obtain a sample of size n
samp_mean[i] <- mean(samp) # save sample mean samp_sd[i] <- sd(samp) # save sample sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1],upper_vector[1])
for(i in 1:50){
samp <- sample(population, n) # obtain a sample of size n
samp_mean[i] <- mean(samp) # save sample mean
samp_sd[i] <- sd(samp) # save sample sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1],upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
